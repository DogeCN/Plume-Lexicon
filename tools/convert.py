from .base import *
from libs.stdout import _getstamp
from docx import Document
from docx.oxml.ns import qn
from docx.shared import Pt
import res.info as info

tr = {
    'view' : ("已转换到 '%s'\n是否查看?", 'Converted to %s\nDo You Want to Have a View?'),
    'stamp' : ('翻译器 %s 生成于 %s', 'Generated by Translator %s on %s'),
    'error' : ('错误: %s', 'Error: %s')
}

def main(*args):
    try:
        file_name=tool.SaveFile(type='*.docx')
        if file_name:
            process().save(file_name)
            if tool.Ask(tool.getTr('view') % file_name):
                tool.Pop(file_name)
    except Exception as e:
        tool.Error(tool.getTr('error') % e)

def process():
    from libs.config import Setting
    document = Document()
    section = document.sections[0]
    path = section._sectPr.xpath('./w:cols')[0]
    path.set(qn('w:num'), '4')
    path.set(qn('w:space'), '20')
    section.top_margin = Pt(10)
    section.bottom_margin = Pt(10)
    section.left_margin = Pt(20)
    section.right_margin = Pt(20)
    section.page_width = Pt(595)
    section.page_height = Pt(842)
    font_family = u'Microsoft YaHei UI'
    normal = document.styles['Normal']
    normal.font.name = font_family
    normal._element.rPr.rFonts.set(qn('w:eastAsia'), font_family)
    normal.font.size = Pt(9)
    header = section.header.paragraphs[0]
    header.add_run(tool.getTr('stamp') % (info.Translator, _getstamp('%m/%d')))
    for result in io.read_vocabulary():
        information = result.info
        head = f'{result.word} /{information}/' if information else result.word
        p = document.add_paragraph(f'{head}\n{result.get_translation(Setting.Language)}')
        p.paragraph_format.line_spacing = Pt(10)
        p.paragraph_format.space_after = Pt(5)
    return document

tool = Tool()
tool.name = 'Convert'
tool.name_zh = '转换'
tool.doc = 'Convert vocabulary file to docx'
tool.doc_zh = '转换单词表为文档'
tool.action.shortcut = 'Ctrl+Alt+C'
tool.Tr = tr
tool.entrance = main
tool.attr = 'Green', 'Bold'
