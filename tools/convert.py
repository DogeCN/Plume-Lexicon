from .base import *
from PySide6.QtWidgets import QDialog
from ._convert import ui
from libs.stdout import _getstamp
from docx import Document
from docx.oxml.ns import qn
from docx.shared import Pt
import info

tr = {
    'view' : ("已转换到 '%s'\n是否查看?", 'Converted to %s\nDo You Want to Have a View?'),
    'stamp' : ('翻译器 %s 生成于 %s', 'Generated by Translator %s on %s'),
    'error' : ('错误: %s', 'Error: %s')
}

UITr = {
    'Columns' : '列数',
    'Font' : '字体',
    'Pt' : '磅',
    'Sections' : '段落',
    'Stamp' : '时间戳',
    'Word' : '单词',
    'Word Count' : '单词计数'
}

def uimain():
    dialog = QDialog()
    dialog.setWindowIcon(ui.icon)
    dialog.accepted.connect(main)
    dialog.setWindowTitle(tool.get_name())
    ui.setupUi(dialog, UITr)
    dialog.exec()

def main():
    try:
        file_name=tool.SaveFile(type='*.docx')
        if file_name:
            process().save(file_name)
            if tool.Ask(tool.getTr('view') % file_name):
                tool.Pop(file_name)
    except Exception as e:
        tool.Error(tool.getTr('error') % e)

def process():
    from libs.config import Setting
    document = Document()
    section = document.sections[0]
    path = section._sectPr.xpath('./w:cols')[0]
    path.set(qn('w:num'), str(ui.Columns.value()))
    path.set(qn('w:space'), '20')
    section.top_margin = Pt(10)
    section.bottom_margin = Pt(10)
    section.left_margin = Pt(20)
    section.right_margin = Pt(20)
    section.page_width = Pt(595)
    section.page_height = Pt(842)
    font_family = ui.Font.currentText()
    normal = document.styles['Normal']
    normal.font.name = font_family
    normal._element.rPr.rFonts.set(qn('w:eastAsia'), font_family)
    normal.font.size = Pt(ui.Font_Size.value())
    if ui.Stamp.isChecked():
        header = section.header.paragraphs[0]
        stamp = tool.getTr('stamp') % (info.version, _getstamp(ui.Stamp_Format.currentText()))
        header.add_run(stamp + f' ({tool.ui.ui.Bank.count()})' if ui.Word_Count.isChecked() else '')
    for result in tool.ui.ui.Bank.results:
        information = result.info
        word = ''.join(['_' if not ui.Word.isChecked() and c.isalpha() else c for c in result.word])
        head = word + f' /{information}/' if ui.Informations.isChecked() and information else ''
        p = document.add_paragraph(head + f'\n{result.get_translation(Setting.Language)}' if ui.Translations.isChecked() else '')
        p.paragraph_format.line_spacing = Pt(ui.Font_Size.value())
        p.paragraph_format.space_after = Pt(5)
    return document

tool = Tool()
tool.name = 'Convert'
tool.name_zh = '转换'
tool.doc = 'Convert vocabulary file to docx'
tool.doc_zh = '转换单词表为文档'
tool.Tr = tr
tool.entrance = uimain
