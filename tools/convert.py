from .base import *
from PySide6.QtWidgets import QDialog
from ._convert import ui
from libs.io.stdout import getstamp
from libs.ui import Theme
from docx import Document
from docx.oxml.ns import qn
from docx.shared import Pt

tr = {
    "view": (
        "已转换到 '%s'\n是否查看?",
        "Converted to %s\nDo You Want to Have a View?",
    ),
    "stamp": ("%s 生成于 %s", "Generated by %s on %s"),
    "error": ("错误: %s", "Error: %s"),
}

UITr = {
    "Columns": "列数",
    "Font": "字体",
    "Pt": "磅",
    "Sections": "内容",
    "Stamp": "时间戳",
    "Words": "单词",
    "Word Count": "单词计数",
}


def loadSettings():
    global columns, font, fontSize, stamp, stampFormat, wordCount, sectionWord, sectionPhon, sectionTrans
    data = tool.data.Get()
    if data:
        try:
            (
                columns,
                font,
                fontSize,
                stamp,
                stampFormat,
                wordCount,
                sectionWord,
                sectionPhon,
                sectionTrans,
            ) = data
            ui.Columns.setValue(columns)
            ui.Font.setCurrentText(font)
            ui.FontSize.setValue(fontSize)
            ui.Stamp.setChecked(stamp)
            ui.StampFormat.setCurrentText(stampFormat)
            ui.WordCount.setChecked(wordCount)
            ui.Word.setChecked(sectionWord)
            ui.Phonetic.setChecked(sectionPhon)
            ui.Translations.setChecked(sectionTrans)
        except:
            ...


def saveSettings():
    tool.data.Set(
        [
            ui.Columns.value(),
            ui.Font.currentText(),
            ui.FontSize.value(),
            ui.Stamp.isChecked(),
            ui.StampFormat.currentText(),
            ui.WordCount.isChecked(),
            ui.Word.isChecked(),
            ui.Phonetic.isChecked(),
            ui.Translations.isChecked(),
        ]
    )


def uimain():
    dialog = QDialog()
    dialog.setWindowIcon(ui.icon)
    dialog.accepted.connect(main)
    dialog.setWindowTitle(tool.get_name())
    ui.setupUi(dialog, UITr)
    ui.Stamp.toggled.connect(
        lambda b: ui.StampFormat.setEnabled(b) or ui.WordCount.setEnabled(b)
    )
    loadSettings()
    Theme.AddAcrylic(dialog)
    dialog.exec()


def main():
    saveSettings()
    file_name = tool.dialog.SaveFile(type="*.docx")
    if file_name:
        process().save(file_name)
        if tool.message.Ask(tool.tr("view") % file_name):
            tool.dialog.Pop(file_name)


def process():
    document = Document()
    section = document.sections[0]
    path = section._sectPr.xpath("./w:cols")[0]
    path.set(qn("w:num"), str(columns))
    path.set(qn("w:space"), "20")
    section.top_margin = section.bottom_margin = section.left_margin = (
        section.right_margin
    ) = Pt(12)
    section.page_width = Pt(595)
    section.page_height = Pt(842)
    normal = document.styles["Normal"]
    normal.font.name = font
    normal._element.rPr.rFonts.set(qn("w:eastAsia"), font)
    normal.font.size = Pt(fontSize)
    stamp = tool.tr("stamp") % (
        f"{info.prog_name} {info.version}",
        getstamp(stampFormat),
    )
    if stamp:
        header = section.header.paragraphs[0]
        header.add_run(stamp + f" ({tool.mw.ui.Bank.count()})" if wordCount else "")
    for result in tool.mw.ui.Bank.results:
        phonetic = result.phonetic
        word = "".join(
            ["_" if not sectionWord and c.isalpha() else c for c in result.word]
        )
        if sectionPhon and phonetic:
            word += f" /{phonetic}/"
        if sectionTrans:
            word += f" ({result.getTranslation()})"
        p = document.add_paragraph(word)
        p.paragraph_format.line_spacing = Pt(fontSize)
        p.paragraph_format.space_after = Pt(5)
    document.core_properties.comments = stamp
    document.core_properties.author = info.prog_name
    return document


tool = Tool()
tool.name = "Convert"
tool.name_zh = "转换"
tool.doc = "Convert vocabulary file to docx"
tool.doc_zh = "转换单词表为文档"
tool.tr.Tr = tr
tool.entrance = uimain
tool.action.icon = ui.icon
